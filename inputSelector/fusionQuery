#!/usr/bin/python

"""usage: fusionQuery -h | --help
        fusionQuery DBFILE -o ORBIT
        fusionQuery DBFILE -t STARTTIME ENDTIME

Arguments:
    DBFILE              The timespan database to query 
    ORBIT               The orbit number 
    STARTTIME, ENDTIME  YYYYMMDDHHMMSS format timespan to return all overlapping files


Options:
    --printall          Print all files for each orbit in DB
    -s <start> <end>    Print files that overlap with start and end time, start/end as YYYYMMDDHHMMSS
    -o <orbit>          Print files that start in a particular orbit
    -h, --help          Print usage

"""

import sqlite3
import sys
from datetime import datetime
import logging
from logging import *
import os
from docopt import docopt
import time
from time import mktime, strptime

# execute the DB query string
def dbexec(cursor, qstring):
    cursor = cursor.execute(qstring)
    return cursor

def openDB(dbfile):
    dbconnection = sqlite3.connect(dbfile)
    cursor = dbconnection.cursor()
    return cursor

def orbitFiles(cursor, orbit):
    oquery = "SELECT stime, etime FROM orbits where orbit = {}".format(orbit)
    cursor = cursor.execute(oquery)
    data = cursor.fetchall()
    stime, etime = data[0]
    subqueries = []
    instruments = ["modis", "mopitt", "aster", "ceres", "miser"]
    for inst in instruments:
        subqueries.append("SELECT dir, fname FROM {} inner join dirs on dirs.id == {}.directory where stime >= {} and stime < {}".format(inst, inst, stime, etime))
    fquery = ' UNION '.join(subqueries)
    cursor = cursor.execute(fquery)
    #debug("orbit query found {} files".format(cursor.rowcount))
    files = cursor.fetchall()
    return files

def printall(cursor):
    oquery = "SELECT orbit FROM orbits order by orbit"
    cursor = cursor.execute(oquery)
    for orbit in cursor.fetchall():
        for file in orbitFiles(cursor, orbit[0]):
            print("{} {}".format(orbit[0], file[1]))
    return

def main():
    cursor = openDB(args['DBFILE'])
    if args.get('-o', False):
        for file in orbitFiles(cursor, args['-o']):
            print("{}/{}".format(file[0], file[1]))
    elif args.get('--printall', False):
        printall(cursor)
    return

args = docopt(__doc__)

if __name__ == '__main__':
    logLevel = logging.NOTSET
    if 'LOGLEVEL' in os.environ:
        logLevel = getattr(logging, os.environ['LOGLEVEL'])
    logging.basicConfig(level=logLevel, stream=sys.stdout, 
    	format=sys.argv[0].split('/')[-1]+': %(message)s')
    main()
    sys.exit(0)





