    #!/usr/bin/python
#
"""buildDB - Build the timespan database from orbits data-file and instrument-file-names data-files

Usage:
    buildDB [-oh] DB_FILE ORBIT_FILE INSTRUMENT_FILE
    buildDB -h | --help

Arguments:
    DB_FILE     Path the the database
    ORBIT_FILE  Path to the orbit data file
    INSTRUMENT_FILE Path to a file with a list of all instrument files

Options:
    -h --help   Show help
    -o  Overwrite existing database

"""

from __future__ import print_function
import sqlite3
import gzip
import sys
from datetime import datetime
import logging
from logging import *
import os
from docopt import docopt
import time
from time import mktime, strptime

def usage():
    print (__doc__)
    return

# execute the DB query string
def dbexec(cursor, qstring):
    cursor = cursor.execute(qstring)
    return cursor

def createDB(dbfile):
    dbconnection = sqlite3.connect(dbfile)
    cursor = dbconnection.cursor()
    tstrs = {'CREATE TABLE orbits (stime integer PRIMARY KEY, etime integer, orbit integer)'}
    for inst in {"modis", "moppit", "aster", "ceres", "miser"}:
        tstrs.add('CREATE TABLE {} (stime integer KEY, etime integer KEY, fname text KEY)'.format(inst))
    for query in tstrs:
        cursor = dbexec(cursor, query)
    return dbconnection, cursor

def addOrbits(cursor, orbitsfile):
    istr = 'INSERT INTO orbits (stime, etime, orbit) VALUES ({},{},{})'
    timeFmt = '%Y-%m-%dT%H:%M:%SZ'
    with gzip.open(orbitsfile, 'r') as infile:
        for line in infile:
            line = line.decode("utf-8-sig")
            orbitnum, starttime, endtime = line.split()
            stime = time.mktime(datetime.strptime(starttime, timeFmt).timetuple())
            etime = time.mktime(datetime.strptime(endtime, timeFmt).timetuple())
            cursor = dbexec(cursor, istr.format(stime, etime, orbitnum))
    return cursor

def addmop(cursor, directory, fname):
    try:
        istr = 'INSERT INTO moppit VALUES ({},{},"{}")'
        sformat = '%Y%m%d'
        ss = fname.split('-')
        sstr = ss[1]
        stime = int(mktime(strptime(sstr, sformat)))
        etime = stime + 60*60*24
        debug("add modus %d %d %s", stime, etime, directory+'/'+fname)
        qs = istr.format(stime, etime, directory+'/'+fname)
        cursor = dbexec(cursor, qs)
    except Exception as e:
        error("add moppit %s failed", directory+'/'+fname)
    return cursor
    
def addmod(cursor, directory, fname):
    try:
        istr = 'INSERT INTO modis (stime, etime, fname) VALUES ({},{},"{}")'
        sformat = '%Y%j%H%M'
        eformat = '%Y%j%H%M%S'
        ss = fname.split('.')
        sstr = ss[1][1:]+ss[2]
        estr = ss[4]
        stime = int(mktime(strptime(sstr, sformat)))
        etime = int(mktime(strptime(estr, eformat)))
        debug("add modus %d %d %s", stime, etime, directory+'/'+fname)
        qs = istr.format(stime, etime, directory+'/'+fname)
        cursor = dbexec(cursor, qs)
    except Exception as e:
        error("add modis %s failed", directory+'/'+fname)
    return cursor

def addcer(cursor, directory, fname):
    warn("CERES input not implemented: %s", directory+"/"+fname)
    return
    istr = 'INSERT INTO ceres (stime, etime, fname) VALUES ({},{},"{}")'
    sformat = '%Y%j%H%M'
    eformat = '%Y%j%H%M%S'
    ss = fname.split('.')
    sstr = ss[1][1:]+ss[2]
    estr = ss[4]
    stime = int(mktime(strptime(sstr, sformat)))
    etime = int(mktime(strptime(estr, eformat)))
    debug("add ceres %d %d %s", stime, etime, directory+'/'+fname)
    qs = istr.format(stime, etime, directory+'/'+fname)
    cursor = dbexec(cursor, qs)
    return cursor

def addast(cursor, directory, fname):
    try:
        istr = 'INSERT INTO aster (stime, etime, "fname") VALUES ({}, {},"{}")'
        sformat = '003%d%m%Y%H%M%S'
        ss = fname.split('_')
        startstring = ss[2]
        stime = int(mktime(strptime(startstring, sformat)))
        etime = stime+9
        debug("add aster %d %d %s", stime, etime, directory+'/'+fname)
        cursor = dbexec(cursor, istr.format(stime, etime, directory+'/'+fname))
    except Exception as e:
        error("add aster %s failed", directory+'/'+fname)
    return cursor

def addmisr(cursor, directory, fname):
    try:
        istr = 'INSERT INTO miser (stime, etime, "fname") VALUES ({}, {},"{}")'
        ss = fname.split('_')
        startstring = ss[6]
        orbit = int(startstring[1:])
        # find the orbit time
        qstr = 'SELECT * from orbits WHERE orbit = {}'.format(orbit)
        qcurs = dbexec(cursor, qstr)
        rows = qcurs.fetchall()
        if len(rows) == 0:
            warn("Orbit %d times unavailable: can't add %s", orbit, directory+'/'+fname)
        return cursor
        stime, etime = qcurs[0], qcurs[1]
        debug("get orbit %d: start %d end %d", orbit, stime, etime)
        debug("add miser %d %d %s", stime, etime, directory+'/'+fname)
        cursor = dbexec(cursor, istr.format(stime, etime, directory+'/'+fname))
    except Exception as e:
        error("add misr %s failed", directory+'/'+fname)
    return cursor

def addInstrumentFile(connection, cursor, instFile):
    debug("addInstrumentFile(%s)", instFile)
    # THe mapping of filename match to DB add routines
    match_list = {"MODI": addmod, "ASTE": addast, "CER_": addcer, "MOPP": addmop, "MISR": addmisr}
    last_directory = ''

    with gzip.open(instFile, 'r') as infile:
        count = 0
        commit_rate = 1000
        for line in infile:
            line = line.decode("utf-8-sig").rstrip('\n').rstrip('\r')
            directory, _, fname = line.rpartition('/')
            addFunc = match_list.get(fname[0:4])
            if addFunc is None:
                # might be a directory with file list inside  to follow
                warn("addInstrumentFile: no match for line %s", line)
                if line.startswith('/'):
                    warn("addInstrumentFile: assume directory %s for following files", line)
                    last_directory = line
            elif fname.find('.') == -1:
                warn("skipping input %s", line)
            elif len(directory) == 0:
                addFunc(cursor, last_directory, fname)
            else:
                addFunc(cursor, directory, fname)
            count += 1
            if (count % commit_rate) == 0:
                connection.commit()
    return cursor

def main():
    args = docopt(__doc__)
    if args['-o']:
        os.remove(args['DB_FILE'])
    connection, cursor = createDB(args['DB_FILE'])
    cursor = addOrbits(cursor, args['ORBIT_FILE'])
    connection.commit()
    cursor = addInstrumentFile(connection, cursor, args['INSTRUMENT_FILE'])
    connection.commit()
    cursor.close()
    print ('end')
    return


if __name__ == '__main__':
    logLevel = logging.NOTSET
    if 'LOGLEVEL' in os.environ:
        logLevel = getattr(logging, os.environ['LOGLEVEL'])
    logging.basicConfig(level=logLevel, stream=sys.stdout, 
	format=sys.argv[0].split('/')[-1]+': %(message)s')
    main()
    sys.exit(0)





